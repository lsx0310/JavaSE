Map存储数据的特点
键值对
key  无序的 不可重复的  用Set存储
value  无序的，可重复的 用Collection存储
entry  无序的，不可重复的  用Set存储
Map常用实现类
HashMap     线程不安全，效率高

   LinkedHashMap
TreeMap

Hashtable   线程安全的
   properties


Collection 和 Collections
Collections 操作Collection和Map的工具类
XXX
XXXS   ----  >    工具类命名

如何遍历Map 使用泛型
Map<K,V> map = new Map<>();
Set<Entry<K,V>> entry = map.entry();
Set<K> set1 = entry.getKey();
Collection<V> cl = entry.getvalue();

写出使用Itertor和增强for循环遍历List<String> 使用泛型
List<String> list = new List<>();
Itertor<String> itertor = list.itertor():
while(itertor.hasNext()){
	System.out.println(itertor.next());
}
for(String s : list){
	System.out.println(s);
}

提供一个方法，用于遍历获取HashMap<String,String>中所有的value,并存放在List中返回，考虑泛型
public List<String> getMapValues(Map<String,String> map){
	
	List<String> list = new ArrayList<>();
	Collection<String> cl = map.values();
	for (String s : cl){
		list.add(s);
	}
	return list;	
}


创建一个与a.txt 同目录的 b.txt

public void createfile(File filepath,String newFileName){
	File parentFile = filepath.getParent();
	File newFile = new File(parentFile,newFileName);
	newFile.createNewFile();
}

Map 接口中常用的方法有哪些：
xxx

泛型的概念：
	所谓泛型，就是在定义类或者接口时，通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。
这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时确定（即传入实际的类型参数，也成为类型实参））


相对路径、绝对路径
说明：
	IDEA中：
		若开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。
		若使用main方法测试，相对路径即为当前Project下
	Elicpse中：
		任意测试方法，相对路径都是在Project下
		
		
IO 流的分类
按操作数据单位不同分为：字节流（8bit 图片、视频的非文本），字符流（16bit，适合于文本）
按数据流的流向不同分为：输入流，输出流
按流的角色的不同分为：节点流，处理流
    抽象基类      	字节流            字符流
	 输入流          InputStream       Reader
	 输出流          OutputStream      Writer
	 
	 
NIO2  JDK1.7 文件操作


TCP/IP 
应用层                   HTTP FTP Telnet DNS  ...
传输层                   TCP  UDP ...
连接层                   IP ICMP ARP ...
链路层+物流层            Link





